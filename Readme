
# 📊 Projet IPS Dashboard (FastAPI + PostgreSQL + Dash)

Ce projet permet de :

- Stocker des données d’écoles avec leur **Indice de Position Sociale (IPS)** dans une base **PostgreSQL**.
- Fournir une API REST sécurisée via **FastAPI** (authentification JWT).
- Visualiser les données dans un **Dashboard  Dash**.

---

## 🚀 Fonctionnalités

### 🔐 API FastAPI

- Authentification par **JWT** (`admin` / `1234`).
- Endpoints :
  - `POST /login` → Récupération du token JWT.
  - `GET /schools` → Liste complète des écoles.
  - `GET /schools/{uai}` → Détails d’une école par UAI.
  - `GET /schools/ips?min_ips=&max_ips=` → Filtrage des écoles selon l’IPS.
  - `DELETE /schools/{uai}` → Supprimer une école (JWT requis).

### 📈 Dashboard Dash

- Graphique dynamique de l’**IPS moyen par département**.
- Graphique des **écoles par tranche d’IPS (par pas de 5 entre 80 et 115)**.
- Données chargées via l’API (pas d'accès direct à la base).

---

## 🗂️ Architecture du projet

```
project-root/
│
├── app/                            # Code backend FastAPI
│   ├── main.py                     # Entrée principale de l’API
│   ├── entrypoint.sh               # Script Docker : init DB + lancement FastAPI
│   ├── requirements.txt            # Dépendances Python (API)
│   ├── auth.py                     # Fonctions de hash / JWT
│   ├── dependencies.py             # Vérification JWT
│   ├── schemas.py                  # Schémas Pydantic de réponse
│   ├── tests/                      # Tests unitaires de l’API
│   │   └── test_main.py
│   ├── bdd/
│   │   ├── database.py             # SQLAlchemy Base + Session
│   │   ├── models.py               # Tables User et School
│   │   ├── init_db.py              # Création des tables
│   │   ├── load_ips.py             # Import CSV + création admin
│   │   └── ips.csv                 # Données d’écoles
│   └── routers/
│       ├── schools.py              # Routes /schools
│       └── auth.py                 # Route /login
│
├── dashboard/                      # Code du dashboard Dash
│   ├── app.py                      # App Dash (visualisation)
│   ├── requirements.txt            # Dépendances Dash
│   └── Dockerfile                  # Image du dashboard
│
├── .env                            # Configuration d’environnement
├── Dockerfile                      # Dockerfile backend
├── docker-compose.yml              # Déploiement multi-services
```

---

## 🐳 Lancement du projet

```bash
docker-compose up --build
```

Accès aux services :

- 🔗 API : http://localhost:8000/docs
- 📊 Dashboard : http://localhost:8050

---

## 🔐 Authentification

```http
POST /login
{
  "username": "admin",
  "password": "1234"
}
```

Dans Swagger (`/docs`), cliquez sur **Authorize**, puis collez le token JWT dans ce format :

```
Bearer <votre_token>
```

---

## ✅ Tests unitaires

Les tests de l’API sont définis dans `app/tests/test_main.py` et sont lancés automatiquement au démarrage.

```bash
# Pour relancer manuellement :
docker exec -it fastapi_app pytest
```

Les tests vérifient :

- Accès aux écoles (`/schools`)
- Filtrage IPS
- Authentification JWT (valide et invalide)

---

## 📝 Exemple d’utilisation

- Affichez les écoles dont l’IPS est compris entre 90 et 100 :
  ```
  GET /schools/ips?min_ips=90&max_ips=100
  ```

- Supprimez une école :
  ```
  DELETE /schools/0931234A (avec token JWT)
  ```

---

